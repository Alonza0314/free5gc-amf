// Code generated by MockGen. DO NOT EDIT.
// Source: init.go
//
// Generated by this command:
//
//	mockgen -source=init.go -package=service -destination interface.go
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	context0 "github.com/free5gc/amf/internal/context"
	consumer "github.com/free5gc/amf/internal/sbi/consumer"
	factory "github.com/free5gc/amf/pkg/factory"
	gomock "go.uber.org/mock/gomock"
)

// MockApp is a mock of App interface.
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp.
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance.
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// CancelContext mocks base method.
func (m *MockApp) CancelContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// CancelContext indicates an expected call of CancelContext.
func (mr *MockAppMockRecorder) CancelContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelContext", reflect.TypeOf((*MockApp)(nil).CancelContext))
}

// Config mocks base method.
func (m *MockApp) Config() *factory.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*factory.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockAppMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockApp)(nil).Config))
}

// Consumer mocks base method.
func (m *MockApp) Consumer() *consumer.Consumer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consumer")
	ret0, _ := ret[0].(*consumer.Consumer)
	return ret0
}

// Consumer indicates an expected call of Consumer.
func (mr *MockAppMockRecorder) Consumer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumer", reflect.TypeOf((*MockApp)(nil).Consumer))
}

// Context mocks base method.
func (m *MockApp) Context() *context0.AMFContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(*context0.AMFContext)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAppMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockApp)(nil).Context))
}

// Start mocks base method.
func (m *MockApp) Start(tlsKeyLogPath string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", tlsKeyLogPath)
}

// Start indicates an expected call of Start.
func (mr *MockAppMockRecorder) Start(tlsKeyLogPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockApp)(nil).Start), tlsKeyLogPath)
}

// Terminate mocks base method.
func (m *MockApp) Terminate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Terminate")
}

// Terminate indicates an expected call of Terminate.
func (mr *MockAppMockRecorder) Terminate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockApp)(nil).Terminate))
}
